buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/android/android-tools" }
  }

  dependencies {
    classpath 'io.fabric.tools:gradle:1.21.2'
    classpath 'me.tatarka:gradle-retrolambda:3.2.4'
    classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
    classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.5.0'
    classpath 'com.github.triplet.gradle:play-publisher:1.1.4'
  }
}

apply plugin: 'com.android.application'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: "build-time-tracker"
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.neenbedankt.android-apt'

buildtimetracker {
  reporters {
    csv {
      output "build/times.csv"
      append true
      header false
    }

    csvSummary {
      csv "build/times.csv"
    }
  }
}
//gradle dependencyUpdates -Drevision=release

android {
  compileSdkVersion 23
  buildToolsVersion '23.0.3'
  dexOptions {
    javaMaxHeapSize "4g"
  }
  testOptions {
    unitTests.returnDefaultValues = true
  }
  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 23
    versionName "2.14.13"
    versionCode 214013
    resValue "string", "app_git_hash", getCurrentGitHash()

    multiDexEnabled true
    vectorDrawables.useSupportLibrary = true
  }

  lintOptions {
    abortOnError false
  }

  signingConfigs {
    release {
      storeFile file("../app.keystore.jks")
    }
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  productFlavors {
    github {
      applicationId "com.alorma.github"
      ext.betaDistributionGroupAliases = "gitskarios-alpha-testers"
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix ".debug"
      buildConfigField "String", "CLIENT_ID", "\"" + getGHId(false) + "\""
      buildConfigField "String", "CLIENT_SECRET", "\"" + getGHSecret(false) + "\""
      buildConfigField "String", "CLIENT_CALLBACK", "\"" + getGHCallback(false) + "\""
    }
    release {
      minifyEnabled false
      signingConfig = signingConfigs.release
      buildConfigField "String", "CLIENT_ID", "\"" + getGHId(true) + "\""
      buildConfigField "String", "CLIENT_SECRET", "\"" + getGHSecret(true) + "\""
      buildConfigField "String", "CLIENT_CALLBACK", "\"" + getGHCallback(true) + "\""
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

// delete unaligned files
android.applicationVariants.all { variant ->
  variant.assemble.doLast {
    variant.outputs.each { output ->
      println "aligned " + output.outputFile
      println "unaligned " + output.packageApplication.outputFile

      File unaligned = output.packageApplication.outputFile;
      File aligned = output.outputFile
      if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
        println "deleting " + unaligned.getName()
        unaligned.delete()
      }
    }
  }
}

def getCurrentGitHash() {
  return 'git rev-parse --short HEAD'.execute().text.trim()
}

def getGHId(pro) {
  if (pro) {
    return hasProperty('GH_PRO_ID') ? GH_PRO_ID : System.getenv('GH_PRO_ID')
  } else {
    return hasProperty('GH_DEV_ID') ? GH_DEV_ID : System.getenv('GH_DEV_ID')
  }
}

def getGHSecret(pro) {
  if (pro) {
    return hasProperty('GH_PRO_SECRET') ? GH_PRO_SECRET : System.getenv('GH_PRO_SECRET')
  } else {
    return hasProperty('GH_DEV_SECRET') ? GH_DEV_SECRET : System.getenv('GH_DEV_SECRET')
  }
}

def getGHCallback(pro) {
  if (pro) {
    return hasProperty('GH_PRO_CALLBACK') ? GH_PRO_CALLBACK : System.getenv('GH_PRO_CALLBACK')
  } else {
    return hasProperty('GH_DEV_CALLBACK') ? GH_DEV_CALLBACK : System.getenv('GH_DEV_CALLBACK')
  }
}

dependencies {
  compile project(':sdks:GithubAndroidSdk')
  compile project(':sdks:GithubReborn')

  compile('com.crashlytics.sdk.android:crashlytics:2.5.6@aar') {
    transitive = true;
  }


  compile('com.mikepenz:aboutlibraries:5.2.2@aar') {
    transitive = true
  }
  compile('com.mikepenz:materialdrawer:5.2.5@aar') {
    transitive = true
  }
  compile('com.github.afollestad.material-dialogs:core:0.8.5.8@aar') {
    transitive = true
  }
  compile('com.github.afollestad.material-dialogs:commons:0.8.5.8@aar') {
    transitive = true
  }
  compile('com.crashlytics.sdk.android:answers:1.3.7@aar') {
    transitive = true;
  }


  testCompile 'junit:junit:4.12'
  testCompile 'org.assertj:assertj-core:1.7.0'
  testCompile "org.mockito:mockito-core:1.10.19"



  apt "com.google.dagger:dagger-compiler:2.4"
  compile "com.google.dagger:dagger:2.4"

  compile 'com.pddstudio:highlightjs-android:1.0.1'

  compile('com.github.ZieIony:NaturalDateFormat:master-SNAPSHOT') {
    exclude group: "joda-time"
  }
  compile 'com.jakewharton.rxbinding:rxbinding:0.3.0'
  compile 'com.github.xiprox.errorview:library:2.2.0'
  compile 'com.android.support:design:23.4.0'
  compile 'com.android.support:appcompat-v7:23.4.0'
  compile 'com.android.support:palette-v7:23.4.0'
  compile 'com.android.support:recyclerview-v7:23.4.0'
  compile 'com.android.support:cardview-v7:23.4.0'
  compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'
  compile 'se.emilsjolander:stickylistheaders:2.7.0'
  compile 'com.nineoldandroids:library:2.4.0'
  compile 'org.ocpsoft.prettytime:prettytime:4.0.0.Final'
  compile 'com.mikepenz:actionitembadge:3.1.1@aar'
  compile 'com.mikepenz:octicons-typeface:3.2.0.1@aar'
  compile 'com.mikepenz:community-material-typeface:1.3.41.1@aar'
  compile 'com.mikepenz:google-material-typeface:1.2.0@aar'
  compile 'com.squareup:otto:1.3.8'
  compile 'com.wefika:flowlayout:0.4.0'
  compile 'com.github.gabrielemariotti.changeloglib:changelog:2.0.0'
  compile 'com.timehop.stickyheadersrecyclerview:library:0.4.2@aar'
  compile('com.afollestad:material-cab:0.1.11@aar') {
    transitive = true
  }
  compile 'com.github.pedrovgs:renderers:2.0.3'
  compile 'com.jakewharton:butterknife:7.0.1'
  compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
  compile 'com.fewlaps.quitnowcache:quitnow-cache:1.4'
  compile 'com.android.support:multidex:1.0.1'
  compile 'io.reactivex:rxandroid:1.0.1'
  compile 'com.github.Musenkishi:Atelier:1.3.1'
  compile 'com.github.bumptech.glide:glide:3.6.1'
  compile 'jp.wasabeef:glide-transformations:1.3.1'
  compile 'com.github.florent37:glidepalette:1.0.4@aar'
  compile 'cat.ereza:customactivityoncrash:1.4.0'
  compile 'io.mola.galimatias:galimatias:0.2.0'
  compile 'com.karumi:dexter:2.2.1'
  compile 'com.linkedin.android.spyglass:spyglass:1.3.0'
  compile 'com.jakewharton:process-phoenix:1.0.2'
  compile 'com.github.alorma:timelineview:2.2.1'
  compile 'com.roughike:bottom-bar:1.3.2'
  compile 'com.squareup.retrofit2:retrofit:2.0.0'
  compile 'com.squareup.retrofit2:converter-gson:2.0.0'
  compile 'nl.littlerobots.rxlint:rxlint:1.0'

  compile 'com.google.firebase:firebase-core:9.0.2'
  compile 'com.google.firebase:firebase-database:9.0.2'
  compile 'com.google.firebase:firebase-ads:9.0.2'
  compile 'com.google.firebase:firebase-auth:9.0.2'
  compile 'com.google.firebase:firebase-invites:9.0.2'
  compile 'com.google.firebase:firebase-messaging:9.0.2'
  compile 'com.google.firebase:firebase-crash:9.0.2'
}

play {
  jsonFile = file('../gplay-secret.json')
  track = 'production'
}

def (releaseKeystorePassword, releaseKeyAlias, releaseKeyPassword) = signingConfigFromFile()
if (releaseKeystorePassword != null && releaseKeyAlias != null && releaseKeyPassword != null) {
  android.signingConfigs.release.storePassword = releaseKeystorePassword
  android.signingConfigs.release.keyAlias = releaseKeyAlias
  android.signingConfigs.release.keyPassword = releaseKeyPassword
} else {
  println "No se han encontrado las credenciales necesarias para poder firmar el apk :("
  android.buildTypes.release.signingConfig = null
}

def signingConfigFromFile() {
  println '-> signingConfigFromFile'
  def Properties props = new Properties()
  def propFile = file('../signing.properties')

  if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
        props.containsKey('STORE_PASSWORD') &&
        props.containsKey('KEY_ALIAS') &&
        props.containsKey('KEY_PASSWORD')) {

      def keystorePassword = props['STORE_PASSWORD']
      def keyAlias = props['KEY_ALIAS']
      def keyPassword = props['KEY_PASSWORD']

      return [keystorePassword, keyAlias, keyPassword]
    } else {
      println 'signing.properties found but some entries are missing'
    }
  } else {
    println 'signing.properties not found'
  }
  return [null, null, null]
}

apply plugin: 'com.google.gms.google-services'